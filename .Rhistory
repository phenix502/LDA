l[1]
l[2]
l.ex[1]
l.ex[[1]]
l.ex[[2]]
sapply(txt,segmentCN)
txt = txt[txt!=" "]
txt
words = unlist(lapply(txt,segmentCN))
words
words[1]
words[2]
words[3]
cor_test <- Corpus(VectorSource(words))
cor_test
inspect(cor_test)
?paste
file.path <- paste("~/code/jss/clothe/", i, ".txt", sep = "")
file.path <- paste("~/code/jss/clothe/", 1, ".txt", sep = "")
file.path
words
for (i in 1:400){}
file.path <- paste("~/code/jss/clothe/", i, ".txt", sep = "")
txt <- readLines(file.path, encoding = 'utf-8')
## 去掉空白行
txt = txt[txt!=" "]
## 分词
words = unlist(lapply(txt,segmentCN))
file.save <- paste("corpus/", i, ".txt", sep = "")
write.table(words, file.save, fileEncoding = 'utf-8')
}
for (i in 1:400){
file.path <- paste("~/code/jss/clothe/", i, ".txt", sep = "")
txt <- readLines(file.path, encoding = 'utf-8')
## 去掉空白行
txt = txt[txt!=" "]
## 分词
words = unlist(lapply(txt,segmentCN))
file.save <- paste("corpus/", i, ".txt", sep = "")
write.table(words, file.save, fileEncoding = 'utf-8')
}
library(tm)
library(topicmodels)
#读取语料库的路径
cor.path <- "clean"
cor <- Corpus(DirSource(directory = cor.path, encoding = "UTF-8"))
cor.cl <- tm_map(cor,stripWhitespace)
cor.cl <- tm_map(cor.cl,removePunctuation)
cor.cl <- tm_map(cor.cl,removeNumbers)
## 加载停止词
mystopwords <- readLines("stopwords.txt",encoding = "UTF-8")
mystopwords
cor.dtm <- DocumentTermMatrix(cor.cl, control = list(wordLengths = c(2, Inf),stopwords = mystopwords,removePunctuation= TRUE))
cor.dtm
dim(cor.dtm)
inspect(cor.dtm)
cor.dtm <- removeSparseTerms(cor.dtm, 0.99)
rowTotals <- apply(cor.dtm, 1, sum)
cor.dtm <- cor.dtm[rowTotals > 0]
cor.dtm
result_LDA <- LDA(cor.dtm[1:250,],control = list(alpha = 0.1), k = 3)
post <- posterior(result_LDA, newdata = cor.dtm[-c(1:250),])
round(post$topics[1:5,],digits = 2)
get_terms(result_LDA, 5)
a<- -c(1:250)
a
post <- posterior(result_LDA, newdata = cor.dtm[-c(1:150),])
round(post$topics[1:5,],digits = 2)
get_terms(result_LDA, 5)
class(post)
post
get_terms(result_LDA, 5)
396+198
tongxing<-c(5,52,50,15,5,5,5,10)
sum(tongxing)
str(tongxing)
oil<-c(100,135)
sum(oil)
tax.1<-c(15,26,10,27,24,22,26,13)
tax.2<-c(20,12,48,24,17,21,23,19,21)
sum(tax.1)+sum(tax.2)
str(tax.1)
str(tax.2)
tax.3 <-c(23,17,10,10,43,10.8,12,23,30,23,23)
str(tax.)
str(tax.3)
sum(tax.3)
install.packages("rmongo")
install.packages("RMongo")
library(RMongo)
mongo<-mongoDbConnect("mydb","localhost",27017)
output <- dbGetQueryForKeys(mongo, "song", '{"songLyric":}')
output <- dbGetQueryForKeys(mongo, "song", '{"singerName":"林俊杰"}')
output <- dbGetQueryForKeys(mongo, "song", '{songLyric:{$in:[,]}}')
mongo<-mongoDbConnect("mydb","localhost",27017)
output <- dbGetQueryForKeys(mongo, "song", '{songLyric:{$in:[,]}}')
source('~/.active-rstudio-document')
mongo <- mongoDbConnect("test")
output <- dbInsertDocument(mongo, "test_data", ’{"foo": "bar"}’)
output <- dbInsertDocument(mongo, "test_data", {"foo": "bar"})
output <- dbInsertDocument(mongo, "test_data", '{"foo": "bar"}')
output <- dbGetQuery(mongo, 'test_data', '{"foo": "bar"}')
output
output <- dbGetQueryForKeys(mongo, 'song', '{"songLyric" : { $in : [,] } }')
mongo<-mongoDbConnect("mydb","localhost",27017)
output <- dbGetQuery(mongo, 'song', '{"songLyric" : { $in : [,] } }')
output <- dbGetQuery(mongo, 'song', '{"songLyric" : { $in : } }')
output <- dbGetQuery(mongo, 'song', '{"songLyric" : }')
output <- dbGetQuery(mongo, 'song', '{},{"songLyric:1"}')
output
output[1]
type(output)
class(output)
str(output)
output$songName
head(output$songLyric)
?dbGetQuery
output <- dbGetQuery(mongo, 'song', "{'songLyric':1}")
str(output)
output
output <- dbGetQuery(mongo, 'song', "{}, {'songLyric':1}")
output
str(output)
output <- dbGetQuery(mongo, 'song', '{},{"songLyric:1"}')
str(output)
output <- dbGetQuery(mongo, 'song', "{}")
output
output$singerName
output$singerName['卓依婷']
output$singerName[1000]
astring <- output$singerName[1000]
astring
nchar(astring)
grep("卓依婷",astring)
astring[0]
astring[1]
astring[2]
?gsub()
sub("\","",astring)
;
output <- dbGetQuery(mongo, 'song', "{}, {'songLyric':1}")
sub("[\\[\\]","",astring)
astring
sub("[\\]\\[\\"]]","",astring)
sub("[\\]\\[\\"]","",astring)
sub("\\[\\]","",astring)
sub("\\[","",astring)
sub("[\\[\\"]","",astring)
word <- c('abc noboby@stat.berkeley.edu','text with no email','first me@mything.com also you@yourspace.com')
pattern <- '[-A-Za-z0-9_.%]+@[-A-Za-z0-9_.%]+\\.[A-Za-z]+'
(gregout <- gregexpr(pattern,word))
?attr()
word[1]
gregout[1]
gregout[2]
str(gregout)
astring
sub("[[[][]]]","",astring)
sub("[[]","",astring)
sub(patt,"",astring)
patt <- '[\\[\\]]'
sub(patt,"",astring)
word <- c('abc noboby@stat.berkeley.edu','text with no email','first me@mything.com also you@yourspace.com')
patt <- '[\\["\\]]'
sub(patt,"",astring)
astring
patt <- '[[]]'
sub(patt,"",astring)
patt <- '[[]'
sub(patt,"",astring)
patt.1 <- '[[]'
astring.1 <- sub(patt.1,"",astring)
patt.2 <- '[]]'
astring.2 <- sub(patt.2,"",astring.1)
astring.2
patt.3 <- '[\]'
astring.3 <- sub(patt.3,"",astring.2)
patt.3 <- '\\'
astring.3 <- sub(patt.3,"",astring.2)
patt.3 <- '\\\'
astring.3 <- sub(patt.3,"",astring.2)
(gregout <- gregexpr(pattern,word))
source('~/.active-rstudio-document')
astring
grep("[^x00-xff]",astring)
astring[1]
nchar(astring)
output$songLyric
output$songLyric[15]
library(RMongo)
output <- dbGetQuery(mongo, 'chiSong', "{}")
mongo<-mongoDbConnect("test","localhost",27017)
output <- dbGetQuery(mongo, 'chiSong', "{}")
output
str(output)
output$singerName
output$singerName[1]
output$singerName[2]
output$songLyric
output$songLyric[4]
output$songLyric[1]
year <- output$songLyric[1]
year
ls
output <- dbGetQuery(mongo, 'chiSong', "{}")
output$songLyric[3]
output$songLyric[2]
str(output)
output$songLyric[6]
output$songLyric[5]
output$songLyric
output$X_id
output1<- dbGetQuery(mongo, 'chiSong', "{x_id: "5200b55259994b20d43a29a6"}")
output1<- dbGetQuery(mongo, 'chiSong', "{"x_id": "5200b55259994b20d43a29a6"}")
output <- dbGetQuery(mongo, 'chiSong', "{}")
output
output <- dbGetQuery(mongo, 'chiSong', "{}")
output
output$songLyric
str(output)
output$X_id
output <- dbGetQuery(mongo, 'chiSong', "")
output
mongo<-mongoDbConnect("mydb","localhost",27017)
output <- dbGetQuery(mongo, 'song', "")
output
str(output)
output$songLyric
output$songLyric[281]
dir
dir()
ls()
rm(astring.1)
rm(astring.2)
output <- dbGetQuery(mongo, 'song', "")
library(RMongo)
mongo<-mongoDbConnect("mydb","localhost",27017)
output <- dbGetQuery(mongo, 'song', "")
str(output)
str(output$songLyric)
output$songLyric[1]
output$songLyric[2]
str(output$songLyric[2])
class(output$songLyric[2])
library(tm)
library(topicmodels)
?VectorSource
cor <- Corpus(VectorSource(output$songLyric, encoding = "UTF-8"))
str(cor)
cor.cl <- tm_map(cor,stripWhitespace)
cor.cl <- tm_map(cor.cl,removePunctuation)
cor.cl <- tm_map(cor.cl,removeNumbers)
## 加载停止词
mystopwords <- readLines("stopwords.txt",encoding = "UTF-8")
cor.dtm <- DocumentTermMatrix(cor.cl, control = list(wordLengths = c(2, Inf),stopwords = mystopwords,removePunctuation= TRUE))
dim(cor.dtm)
##去掉稀疏矩阵中低频率的词
cor.dtm <- removeSparseTerms(cor.dtm, 0.99)
## 使得每一行至少有一个词不为0
rowTotals <- apply(cor.dtm, 1, sum)
cor.dtm <- cor.dtm[rowTotals > 0]
result_LDA <- LDA(cor.dtm[1:250,],control = list(alpha = 0.1), k = 3)
# jss_CTM <- CTM(cor.dtm[1:250], k = 10)
post <- posterior(result_LDA, newdata = cor.dtm[-c(1:150),])
round(post$topics[1:5,],digits = 2)
str(cor.dtm)
dim(cor.dtm)
cor <- Corpus(VectorSource(output$songLyric, encoding = "UTF-8"))
head(cor)
cor
summary(cor)
inspect(cor)
cor.cl <- tm_map(cor,stripWhitespace)
inspect(cor.cl)
cor.cl <- tm_map(cor.cl,removePunctuation)
cor.cl <- tm_map(cor.cl,removeNumbers)
inspect(cor.cl)
dir()
library(Rwordseg)
col
cor
cor <- tm_map(cor, segmentCN)
cor
inspect(cor)
cor[[1]]
str(cor)
cor.dtm <- DocumentTermMatrix(cor.cl, control = list(wordLengths = c(2, Inf),stopwords = mystopwords,removePunctuation= TRUE))
cor.dtm
inspect(cor.dtm)
cor.dtm <- DocumentTermMatrix(cor, control = list(wordLengths = c(2, Inf),stopwords = mystopwords,removePunctuation= TRUE))
cor.dtm <- DocumentTermMatrix(cor)
cor
?DocumentTermMatrix
cor.dtm <- DocumentTermMatrix(cor)
t
cor.dtm <- DocumentTermMatrix(cor)
library(tm)
cor.dtm <- DocumentTermMatrix(cor)
inspect(cor)
tdm <- TermDocumentMatrix(cor)
docs
docs<- c("I love R","Ivy")
class(docs)
str(docs)
str(output)
str(output$songLyric)
cor <- Corpus(VectorSource(output$songLyric)
)
cor
inspect(cor)
cor.test<-Corpus(VectorSource(docs))
cor.test
inspect(cor.test)
DocumentTermMatrix(cor.test,control=(stopwords))
dtm.test<-DocumentTermMatrix(cor.test,control=(stopwords))
inspect(dtm.test)
cor.dtm <- DocumentTermMatrix(cor)
inspect(cor.dtm)
cor.dtm <- DocumentTermMatrix(cor,segmentCN)
library(Rwordseg)
cor.dtm <- DocumentTermMatrix(cor,segmentCN)
?DataframeSource
cor
inspect(cor)
cor <- tm_map(cor, segmentCN)
cor.dtm <- DocumentTermMatrix(cor)
inspect(cor[1])
docs
docs2<-c("亮晶晶","林俊杰")
corpus<-Corpus(c(docs,docs2))
cor
cor[1][1]
cor[[1]]
cor[[1]][1]
cor.dtm <- DocumentTermMatrix(cor)
cor.dtm <- DocumentTermMatrix(cor)
DocumentTermMatrix
str(DocumentTermMatrix)
?DocumentTermMatrix
inspect(crude)
data("crude")
inspect(crude)
cor.dtm<-DocumentTermMatrix(output$songLyric)
class(crude)
class(cor)
cor[[1]]
cor[[1]][1]
word <- sapply(output$songLyric, segmentCN)
word
cor <- Corpus(VectorSource(word))
inspect(cor)
cor.dtm <- DocumentTermMatrix(cor)
cor.dtm
inspect(cor.dtm)
cor
inspect(cor)
head(cor)
inspect(cor[1])
cor.dtm <- DocumentTermMatrix(cor)
inspect(cor.dtm)
song_two<- output$songLyric[:2]
song_two<- output$songLyric[1:2]
song_two
library(RMongo)
library(tm)
library(topicmodels)
library(Rwordseg)
song_two<- output$songLyric[1:2]
class(song_two)
song_two[1]
song_two
song_two[1][1]
song_two[[1]]
song_two[1][2]
song_two[1][1]
word <- lapply(song_two,segmentCN)
word
word[1]
word[1][1]
word[[1]]
word[[1]][2]
word[1][3]
word[1][2]
unlist(word)
unlist(word)[1]
unlist(word)[2]
unlist(word)[3]
cor <- Corpus(VectorSource(word))
inspect(cor)
cor
cor.dtm <- DocumentTermMatrix(cor)
inspect(cor.dtm)
word
cor
cor[1]
inspect(cor[1])
cor.dtm
a <- word[[1]]
a
a[1]
b <-word[[2]]
a_b.dtm<- DocumentTermMatrix(Corpus(VectorSource(a,b)))
inspect(a_b.dtm)
cor.dtm
inspect(cor.dtm)
removeEnglish <- function(x){
gsub("\w","",x)
}
gsub("\\w","",x)
source('~/.active-rstudio-document')
song_two[2]
removeEnglish(song_two[2])
source('~/.active-rstudio-document')
removeEnglish(song_two[2])
source('~/.active-rstudio-document')
removeEnglish(song_two[2])
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
removeEnglish(song_two[2])
source('~/.active-rstudio-document')
removeEnglish(song_two[2])
song_two <- lapply(song_two, removeEnglish)
song_two
word <- lapply(song_two,segmentCN)
cor <- Corpus(VectorSource(word))
inspect(word)
inspect(cor)
cor.dtm <- DocumentTermMatrix(cor)
cor.dtm
inspect(cor.dtm)
findFreqTerms(cor.dtm,2,Inf)
termFreq(word)
termFreq(song_tow)
termFreq(song_two)
cor
inspect(cor.dtm)
cor.dtm <- DocumentTermMatrix(cor, control=(global = c(1, Inf)))
cor.dtm <- DocumentTermMatrix(cor, control= ( list(global = c(1, Inf)))
)
cor.dtm
cor.dtm <- DocumentTermMatrix(cor)
cor
inspect(cor)
inspect(crude)
word
word[[2]]
unlist(word[[2]])
word[[2]]
word[[2]][1]
inspect(cor.dtm)
cor.dtm <- DocumentTermMatrix(cor, control=list(wordLengths = c(2, Inf))
)
inspect(cor.dtm)
cor.dtm <- DocumentTermMatrix(cor, control=list(wordLengths = c(1, Inf)))
inspect(cor.dtm)
song <- output$songLyric
## 分词
song <- lapply(song, removeEnglish)
word <- lapply(song,segmentCN)
##形成语料库
cor <- Corpus(VectorSource(word))
## 文档-词矩阵 词的长度大于1就纳入矩阵
cor.dtm <- DocumentTermMatrix(cor, control=list(wordLengths = c(1, Inf)))
inspect(cor.dtm)
cor
cor.dtm
##取前面两首歌分析
song <- output$songLyric[1:10]
## 分词
song <- lapply(song, removeEnglish)
word <- lapply(song,segmentCN)
##形成语料库
cor <- Corpus(VectorSource(word))
## 文档-词矩阵 词的长度大于1就纳入矩阵
cor.dtm <- DocumentTermMatrix(cor, control=list(wordLengths = c(1, Inf)))
inspect(cor.dtm)
##取前面两首歌分析
song <- output$songLyric
## 分词
song <- lapply(song, removeEnglish)
word <- lapply(song,segmentCN)
##形成语料库
cor <- Corpus(VectorSource(word))
## 文档-词矩阵 词的长度大于1就纳入矩阵
cor.dtm <- DocumentTermMatrix(cor, control=list(wordLengths = c(1, Inf)))
##去掉稀疏矩阵中低频率的词
cor.dtm <- removeSparseTerms(cor.dtm, 0.99)
## 使得每一行至少有一个词不为0
rowTotals <- apply(cor.dtm, 1, sum)
cor.dtm <- cor.dtm[rowTotals > 0]
dim(cor.dtm)
inspect(cor.dtm)
result_LDA <- LDA(cor.dtm[1:250,],control = list(alpha = 0.1), k = 3)
post <- posterior(result_LDA, newdata = cor.dtm[-c(1:150),])
round(post$topics[1:5,],digits = 2)
get_terms(result_LDA, 5)
result_LDA <- LDA(cor.dtm[1:850,],control = list(alpha = 0.1), k = 3)
# jss_CTM <- CTM(cor.dtm[1:250], k = 10)
post <- posterior(result_LDA, newdata = cor.dtm[-c(1:150),])
round(post$topics[1:5,],digits = 2)
get_terms(result_LDA, 5)
mystopwords <- readLines("stopwords.txt",encoding = "UTF-8")
mystopwords <- readLines("stopwords.txt",encoding = "UTF-8")
cor.dtm <- DocumentTermMatrix(cor, control=list( wordLengths = c(1, Inf),stopwords=mystopwords ))
inspect(cor.dtm)
result_LDA <- LDA(cor.dtm[1:850,],control = list(alpha = 0.1), k = 3)
# jss_CTM <- CTM(cor.dtm[1:250], k = 10)
post <- posterior(result_LDA, newdata = cor.dtm[-c(1:150),])
round(post$topics[1:5,],digits = 2)
get_terms(result_LDA, 5)
install.packages("Rmongo")
install.packages("RMongo")
